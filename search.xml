<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>M1芯片安装homebrew后无法正常安装软件记录</title>
    <url>/2021/07/18/M1%E8%8A%AF%E7%89%87%E5%AE%89%E8%A3%85homebrew%E7%9A%84%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>苹果最新的芯片M1安装homebrew包管理器采用<a href="https://brew.sh/">官网</a>的命令,结果遇到了1.无法进行任何软件安装.2.安装软件遇到报错信息</p>
<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>找不到任何软件,都是报formula或者cask不存在.不知道还以为是真不存在,可是官网明明有这个包的存在.最后我才用的是 <code>rm -fr $(brew --repo homebrew/core) </code> 命令直接删除core核心命令,然后重新brew install 时,它会自动更新core包代码.</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>安装软件时报以下异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Failure while executing; `tar --extract --no-same-owner --file /Users/XX/Library/Caches/Homebrew/downloads/5da338c344047ee06f60495e7def31345483e10f19246aad74dca7f5dcea962d--gdbm-1.20.catalina.bottle.tar.gz --directory /private/tmp/d20210624-13993-hs6cjj` exited with 1. Here&#x27;s the output:</span><br><span class="line">tar: Error opening archive: Failed to open &#x27;/Users/XX/Library/Caches/Homebrew/downloads/5da338c344047ee06f60495e7def31345483e10f19246aad74dca7f5dcea962d--gdbm-1.20.catalina.bottle.tar.gz&#x27;</span><br></pre></td></tr></table></figure>

<p>按照我所查到的资料^1^说:是由于国内镜像的问题.将国内的镜像设置去除即可<code>export HOMEBREW_BOTTLE_DOMAIN=&#39;&#39; </code></p>
<h6 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h6><ol>
<li><a href="https://zhuanlan.zhihu.com/p/383707713">国内 Mac 安装 Homebrew 可能会跳的坑一览</a></li>
</ol>
]]></content>
      <tags>
        <tag>工具集</tag>
      </tags>
  </entry>
  <entry>
    <title>httpCilent的timeout设置</title>
    <url>/2021/01/06/httpCilent%E7%9A%84timeout%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司项目同事在使用httpClient向某个url post 数据时发现：大部分数据在1,2秒内对方url就会有响应，但是偶尔会出现需要等待10多分钟，甚至是30多分钟才能接收到对方返回的成功响应。使用httpClient 时使用的connectionTimeOut,socketTimeOut都设置在一分钟以内，按道理是不会等这么长的时间，应该早就报异常了，但是在等待30分钟之后还是能收到对方的成功响应，这个问题就一直困扰着他。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>其实他当时post文件都是在10m左右，按照计算机网络的通信协议，http协议是基于tcp协议的，tcp 和udp 协议除了前者是稳定传输，后者是非稳定传输；还有一个特点就是udp是不会对应用层的数据进行任何处理，拆分的，直接包上自己的udp头就发出去(其实超过了2^16-20-8 自己还是要拆包的)，而tcp是基于字节流传输的，是会拆分的。而socketTimeOut 指的是两个数据包的间隔，这样一来，我拆分出10个包，每个包从发出到接收到的ack包之间间隔只要在一分钟内就不会抛异常，总的传输时间在10分钟也不会抛异常</p>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><ol>
<li>加大带宽</li>
<li>每次发送异步判断耗时，耗时超过一定时间就重试或者其他逻辑</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 计算机网络和httpclient 底层原理未弄清</p>
<p>5bnktj7l</p>
]]></content>
  </entry>
  <entry>
    <title>Rust miniserve 构建文件服务器</title>
    <url>/2022/07/18/Rust-miniserve-%E6%9E%84%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>历史项目中有一个对外提供文件下载的服务，由于当初并没有给多个消费者，使用频率极低，故只是简单采用python -m SimpleHttpServer 方式提供文件下载功能。后来接手过来也没有注意，随着项目的慢慢用起来，就发现一个问题，python这种方式底层是单线程。严重影响文件下载。故考虑采用其他方案替换。</p>
<p>方案一： tomcat 提供文件服务</p>
<p>方案二： nginx 提供文件服务</p>
<p>方案三： Rust 的miniserve 提供文件服务</p>
<p>最终采用方案三，因该改方案提供简单授权机制，url混淆，证书认证，界面好看点。还有就是rust即将引入liunx阵营，提前看看源码了解下</p>
]]></content>
  </entry>
  <entry>
    <title>java中自动装箱与拆箱</title>
    <url>/2023/08/04/java%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>java中为了提高效率引入基本数据类型，这些基本数据类型是参考C++方式，用在栈上存储的方式替代在堆上创建，提高内存分配效率与减少垃圾回收的消耗。<br>由于java本身是面向对象语言，在集合等某些场景只能存在对象，故java提供了自动拆箱与装箱功能，减少开发者的手动转化。</p>
<h1 id="何为装箱与拆箱"><a href="#何为装箱与拆箱" class="headerlink" title="何为装箱与拆箱"></a>何为装箱与拆箱</h1><p>装箱： 将int值转化成Integer对象操作,就是调用<code>Integer.valueOf(a)</code>这一方法。自动装箱就是：不用开发人员编写这一段代码，编译器编译时看情况(放入集合中)<br>主动帮我们增加这一行代码<br>拆箱： 本质上就是调用<code>a.intValue()</code>这一方法。自动装箱就是：不用开发人员编写这一段代码，编译器编译时看情况(进行运算时)<br>主动帮我们增加这一行代码</p>
<h1 id="装箱与拆箱底层实现"><a href="#装箱与拆箱底层实现" class="headerlink" title="装箱与拆箱底层实现"></a>装箱与拆箱底层实现</h1><p>装箱：<br><img src="http://117.72.11.95:8080/1691305774554.png" alt="1691305775188"><br>可以看到这里面对于-128 -&gt; IntegerCache.high 的值装箱时会使用到缓存, 而这个区间外的，每次装箱会产生一个新对象。<br>IntegerCache.high 默认值为127， 可以通过</p>
<p>拆箱：</p>
<p><img src="http://117.72.11.95:8080/1691305833592.png" alt="1691305834162"></p>
<p>拆箱就更简单，直接返回对象中的成员变量即可。</p>
<h1 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static void test1() &#123;</span><br><span class="line">	Integer i1 = 40;</span><br><span class="line">	Integer i2 =40;</span><br><span class="line">	Integer i3 =0;</span><br><span class="line">	Integer i4 = new Integer(40);</span><br><span class="line">	Integer i5 = new Integer(0);</span><br><span class="line">	Integer i6 = Integer.valueOf(40);</span><br><span class="line">	System.out.println(i1 == i2);       //1. true  有缓存 位于-128 -》127缓存</span><br><span class="line">	System.out.println(i1 == i2 + i3);  //2. true  拆箱</span><br><span class="line">	System.out.println(i1 == i4);       //3. false</span><br><span class="line">	System.out.println(i1 == i4 + i5);  //4. true  拆箱</span><br><span class="line">	System.out.println(i1 == i6);       //5. true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void test2() &#123;</span><br><span class="line">	Integer i1 = 200;</span><br><span class="line">	Integer i2 = 200;</span><br><span class="line">	Integer i3 =0;</span><br><span class="line">	Integer i4 = new Integer(200);</span><br><span class="line">	Integer i5 = new Integer(0);</span><br><span class="line">	Integer i6 = Integer.valueOf(200);</span><br><span class="line">	System.out.println(i1 == i2);      //6. false 超出-128 -》127缓存</span><br><span class="line">	System.out.println(i1 == i2 + i3); //7. true  拆箱</span><br><span class="line">	System.out.println(i1 == i4);      //8. false </span><br><span class="line">	System.out.println(i1 == i4 + i5); //9. true  拆箱</span><br><span class="line">	System.out.println(i1 == i6);      //10. false </span><br><span class="line">	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>字节码层面<br><img src="img_5.png" alt="img_5.png"></p>
<p>可以看到 i1 == i2 + i3 时进行拆箱，拆箱完后属于基本数据类型，java中基本类型的 == 是直接比对其值的，所以会相等。</p>
]]></content>
  </entry>
  <entry>
    <title>java异常受控异常与非受控异常</title>
    <url>/2019/09/11/java%E5%BC%82%E5%B8%B8%E5%8F%97%E6%8E%A7%E5%BC%82%E5%B8%B8%E4%B8%8E%E9%9D%9E%E5%8F%97%E6%8E%A7%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近在参考《重构改善既有代码的设计》做重构的过程中，其中有两节小技巧是介绍如何处理java 中的错误。基于“代码的可理解性应该是我们虔诚追求的目标”采用以异常取代错误代码(310)，其中异常分为受控异常和非受控异常</p>
<h1 id="java异常体系"><a href="#java异常体系" class="headerlink" title="java异常体系"></a>java异常体系</h1><p>![](/home/elizwy/文档/leaner/java/photo/java 异常体系.png)</p>
<p>异常基类是Throwable,其下有两个子类，Error(系统错误)与Exception(系统异常)</p>
<p>Exception 下分为RunTimeException(非受控、检查异常) 和非RuntimException(检查异常)</p>
<h1 id="java-异常最好的实践"><a href="#java-异常最好的实践" class="headerlink" title="java 异常最好的实践"></a>java 异常最好的实践</h1><ol>
<li>采用空对象代替返回null</li>
<li>catch 里要写处理逻辑</li>
<li>能抛受控异常就尽量不抛非受控异常</li>
<li>不要让受控异常不加处理就抛到了前端</li>
<li>数据库连接要关闭库</li>
</ol>
<h1 id="为何还要存在受控异常"><a href="#为何还要存在受控异常" class="headerlink" title="为何还要存在受控异常"></a>为何还要存在受控异常</h1><p>既然RunTimeException 能用来处理错误，而为何还要存在非受控异常，主要是为了让我们在请求了不存在的系统资源时，能够优雅的处理这种情况。另外能够使受限的资源得到尽早的释放</p>
<p>更多资源参考：<a href="https://www.cnblogs.com/huajiezh/p/5236864.html">https://www.cnblogs.com/huajiezh/p/5236864.html</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jpa 双向关联导致的堆栈溢出</title>
    <url>/2019/08/30/jpa%20%E5%8F%8C%E5%90%91%E5%85%B3%E8%81%94%E5%AF%BC%E8%87%B4%E7%9A%84%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近做权限的过程中， 角色和资源的关系是多对多的关系，采用@ManyToMany 注解，在使用双向的过程中出现了jpa 循环依赖导致堆栈溢出问题</p>
<h1 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h1><ul>
<li><p>Role</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Role extends BaseEntity &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long id;</span><br><span class="line">    @Column(name = &quot;role_name&quot;)</span><br><span class="line">    private String roleName;</span><br><span class="line">    @Column(name = &quot;status&quot;)</span><br><span class="line">    private String status;</span><br><span class="line">    /**</span><br><span class="line">     * 角色拥有的资源id</span><br><span class="line">     */</span><br><span class="line">    @Transient</span><br><span class="line">    private Set&lt;Integer&gt; resourceIds=new HashSet&lt;&gt;();</span><br><span class="line">    /**</span><br><span class="line">     * 角色拥有的资源</span><br><span class="line">     */</span><br><span class="line">    @ManyToMany(fetch=FetchType.EAGER)</span><br><span class="line">    @JoinTable(name=&quot;role_resource&quot;,joinColumns = @JoinColumn(name = &quot;role_id&quot;),inverseJoinColumns = @JoinColumn(name = &quot;resource_id&quot;))</span><br><span class="line">    private Set&lt;Resource&gt; resources=new HashSet&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Resource</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    @ManyToOne</span><br><span class="line">    @NotFound(action= NotFoundAction.IGNORE)</span><br><span class="line">    private Resource parent;</span><br><span class="line">    @OneToMany(mappedBy = &quot;parent&quot;)</span><br><span class="line">    @OrderBy(&quot;sort ASC&quot;)</span><br><span class="line">    private List&lt;Resource&gt; childs=new ArrayList&lt;&gt;();</span><br><span class="line">    private String url;</span><br><span class="line">    private String status;</span><br><span class="line">    private String icon;</span><br><span class="line">    private String title;</span><br><span class="line"></span><br><span class="line">    @Transient</span><br><span class="line">    private Integer parentId;</span><br><span class="line"></span><br><span class="line">    @ManyToMany(mappedBy = &quot;resources&quot;)</span><br><span class="line">    private Set&lt;Role&gt; role;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.StackOverflowError: null</span><br><span class="line">	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)</span><br><span class="line">	at com.mysql.jdbc.PreparedStatement.getInstance(PreparedStatement.java:761)</span><br><span class="line">	at com.mysql.jdbc.ConnectionImpl.clientPrepareStatement(ConnectionImpl.java:1471)</span><br><span class="line">	at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4167)</span><br><span class="line">	at com.mysql.jdbc.ConnectionImpl.prepareStatement(ConnectionImpl.java:4071)</span><br><span class="line">	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)</span><br><span class="line">	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)</span><br><span class="line">	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:146)</span><br><span class="line">	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:172)</span><br><span class="line">	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:148)</span><br><span class="line">	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.prepareQueryStatement(AbstractLoadPlanBasedLoader.java:226)</span><br><span class="line">	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:190)</span><br><span class="line">	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:121)</span><br><span class="line">	at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:86)</span><br><span class="line">	at org.hibernate.loader.collection.plan.AbstractLoadPlanBasedCollectionInitializer.initialize(AbstractLoadPlanBasedCollectionInitializer.java:87)</span><br><span class="line">	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:691)</span><br><span class="line">	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:75)</span><br><span class="line">	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2246)</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:580)</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:262)</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:576)</span><br><span class="line">	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:147)</span><br><span class="line">	at org.hibernate.collection.internal.PersistentSet.iterator(PersistentSet.java:188)</span><br><span class="line">	at java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821)</span><br><span class="line">	at java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408)</span><br><span class="line">	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483)</span><br><span class="line">	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)</span><br><span class="line">	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)</span><br><span class="line">	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)</span><br><span class="line">	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)</span><br><span class="line">	at com.testin.user.admin.service.role.domain.Role.getResourceIds(Role.java:76)</span><br><span class="line">	at com.testin.user.admin.service.role.domain.Role.hashCode(Role.java:29)</span><br><span class="line">	at java.util.HashMap.hash(HashMap.java:339)</span><br><span class="line">	at java.util.HashMap.put(HashMap.java:607)</span><br><span class="line">	at java.util.HashSet.add(HashSet.java:220)</span><br><span class="line">	at java.util.AbstractCollection.addAll(AbstractCollection.java:352)</span><br><span class="line">	at org.hibernate.collection.internal.PersistentSet.endRead(PersistentSet.java:355)</span><br><span class="line">	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:236)</span><br><span class="line">	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:223)</span><br><span class="line">	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:196)</span><br><span class="line">	at org.hibernate.loader.plan.exec.process.internal.CollectionReferenceInitializerImpl.endLoading(CollectionReferenceInitializerImpl.java:154)</span><br><span class="line">	at org.hibernate.loader.plan.exec.process.internal.AbstractRowReader.finishLoadingCollections(AbstractRowReader.java:249)</span><br></pre></td></tr></table></figure>



<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p> 从堆栈信息可以看出, 循环依赖的中间衔接点在hashCode，所以我们只需要尝试在被维护方复写hashCode 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return Objects.hash(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro交互式脚本解决vpn冲突问题</title>
    <url>/2021/07/19/manjaro%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%84%9A%E6%9C%AC%E8%A7%A3%E5%86%B3vpn%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>工作之中需要链接各种vpn进入各个环境，由于家里和公司各自有一台电脑，回家时公司电脑通常是不会关机的，vpn也就一直连着，一旦出现了报警，家里电脑连上vpn就和公司电脑的vpn产生冲突，导致互相踢对方，连接不稳定。排查问题十分痛苦，只好回到公司追查问题。如果是家里电脑忘记退出vpn,结果更加痛苦。</p>
<h1 id="环境条件"><a href="#环境条件" class="headerlink" title="环境条件"></a>环境条件</h1><ul>
<li>manjaro操作系统</li>
<li>openvpn3 </li>
<li>expect</li>
</ul>
<h1 id="可行性解决方案"><a href="#可行性解决方案" class="headerlink" title="可行性解决方案"></a>可行性解决方案</h1><ol>
<li>远程连接，家里电脑和公司电脑互相穿透。</li>
<li>家里电脑和公司电脑都各自维护定时脚本</li>
</ol>
<h1 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h1><ul>
<li><p>方案一</p>
<ul>
<li><p>优点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">除了能解决vpn冲突问题，还能处理很多其他问题，资源共享等等</span><br></pre></td></tr></table></figure></li>
<li><p>缺点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要能有稳定的对外端口;暴露公网带来安全风险</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方案二</p>
<ul>
<li><p>优点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">能解决vpn冲突问题，安全</span><br></pre></td></tr></table></figure></li>
<li><p>缺点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比较固定，死板</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>在平衡以上方案的优缺利弊，最终选择了方案二，安全胜于一切，其他的花里胡哨最终都是要乘以这个安全系数的，安全系数为0,其它都是白说。这就是君子不立危墙之下的道理。</p>
<h1 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h1><ol>
<li>编写vpn一键启动/关闭脚本</li>
<li>加入crontab定时队列中</li>
</ol>
<h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><ul>
<li><p>我采用的是openvpn3 来管理vpn，由于openvpn3每次启动需要一堆参数，而且笔者工作时设计多个vpn环境，每次启动也是重复工作，故编写了一个批量启动脚本</p>
</li>
<li><p>由于登陆每次都需要密码，且目前openvpn3没有找到可行性的记住密码功能，故采用expect脚本来完成交互式输入密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vpnStart.tcl</span></span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line">expect&lt;&lt;EOF</span><br><span class="line">spawn openvpn3 session-start -c /data/nutstore/TEST/config/aliyun/aliyun.ovpn</span><br><span class="line">expect  &quot;*key passphrase&quot; &#123;</span><br><span class="line">  send &quot;TEST\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">spawn openvpn3 session-start -c /data/nutstore/TEST/config/TEST/TEST.ovpn</span><br><span class="line">expect  &quot;*key passphrase&quot; &#123;</span><br><span class="line">  send &quot;TEST\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line"> for session in ` openvpn3 sessions-list|grep Path|awk -F &#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; `</span><br><span class="line"> do</span><br><span class="line">  openvpn3 session-manage -D -o $session</span><br><span class="line"> done</span><br><span class="line"> openvpn3 sessions-list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if test $1 = &quot;start&quot;</span><br><span class="line">then</span><br><span class="line"> start</span><br><span class="line">elif test  $1=&quot;stop&quot;</span><br><span class="line">then  </span><br><span class="line"> stop</span><br><span class="line">else </span><br><span class="line"> echo &quot;noting to do&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><ul>
<li><p>加入crontab中，依据笔者的工作作息，设置为工作日12、13、21、22、23、24 关闭。这样一来，最多在家会存在半个小时的冲突时间，完全达到了我想要的效果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 12,13,21,22,23,0 * * 1-5 ~/vpnStart.tcl stop</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 充分动手，利用liunx的高度定制性，为自己需求开发。关于expect相关语法和openvpn3相关语法请参考官方文档即可</p>
]]></content>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro彻底清除网易企业邮箱中的位于已删除文件夹下的文件</title>
    <url>/2021/08/05/manjaro%E5%BD%BB%E5%BA%95%E6%B8%85%E9%99%A4%E7%BD%91%E6%98%93%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E4%B8%AD%E7%9A%84%E4%BD%8D%E4%BA%8E%E5%B7%B2%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<hr>
<p><a href="https://github.com/elizwy/tools/blob/main/shell/MailToolClean">工具链接</a></p>
]]></content>
  </entry>
  <entry>
    <title>mysql round 遇到不精确值的处理</title>
    <url>/2021/07/22/mysql-round-%E9%81%87%E5%88%B0%E4%B8%8D%E7%B2%BE%E7%A1%AE%E5%80%BC%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>　　笔者在处理报表sql时,碰到比率之类的指标需要进行四舍五入保留2位小数操作.按照惯例,round函数操作,但是在碰到如以下sql时出现结果不如预期想象</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> roundTest;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>     <span class="operator">|</span> <span class="keyword">Create</span> <span class="keyword">Table</span>                                                                                                                                                                                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> roundTest <span class="operator">|</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roundTest` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `cost` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `metrics_map` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> roundTest;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> cost   <span class="operator">|</span> metrics_map  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2.0100</span> <span class="operator">|</span> &#123;&quot;count&quot;: <span class="number">2</span>&#125; <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> round(cost<span class="operator">/</span>metrics_map<span class="operator">-</span><span class="operator">&gt;</span>&quot;$.count&quot;,<span class="number">2</span>) <span class="keyword">from</span> roundTest;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> round(cost<span class="operator">/</span>metrics_map<span class="operator">-</span><span class="operator">&gt;</span>&quot;$.count&quot;,<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                 <span class="number">1.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到,当使用round进行四舍五入时,期望结果是1.01,可实际结果是1.00</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>造成这种结果其实是多方努力带来的,</p>
<ol>
<li>可以看到metric_map 是一个json类型,我们从中提取count字段,虽然官方文档没有明确表示返回类型是是什么,但是按到json存储方式,很有可能知道是字符类型,或者为未知类型.</li>
<li>cost 是decimal 类型,属于精确类型, cost/metrics_map-&gt;”$.count” = 精确类型/未知类型(字符类型), 由于count是非精确类型,那么结果就必然是非精确类型.</li>
<li>round 进行四舍五入时按照官方文档是有两种情形的<ol>
<li><p>当对精确类型使用时,就是四舍五入</p>
</li>
<li><p>当对非精确类型使用时,结果将会偏向偶数结</p>
<p><img src="/home/elizwy/.config/Typora/typora-user-images/image-20210723174310858.png" alt="image-20210723174310858"></p>
</li>
</ol>
</li>
</ol>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用cast^2^ 函数将count 转成精确类型即可.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> round(<span class="built_in">sum</span>(cost)<span class="operator">*</span><span class="number">1.0</span><span class="operator">/</span><span class="built_in">cast</span>(<span class="built_in">sum</span>(metrics_map<span class="operator">-</span><span class="operator">&gt;</span><span class="string">&#x27;$.count&#x27;</span>)<span class="keyword">as</span> <span class="type">decimal</span>),<span class="number">2</span>) <span class="keyword">from</span> roundTest;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> round(<span class="built_in">sum</span>(cost)<span class="operator">*</span><span class="number">1.0</span><span class="operator">/</span><span class="built_in">cast</span>(<span class="built_in">sum</span>(metrics_map<span class="operator">-</span><span class="operator">&gt;</span><span class="string">&#x27;$.count&#x27;</span>)<span class="keyword">as</span> <span class="type">decimal</span>),<span class="number">2</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>                                                               <span class="number">1.01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<h6 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h6><ol>
<li> <a href="https://dev.mysql.com/doc/refman/5.7/en/precision-math-rounding.html">Rounding Behavior</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html#function_cast"> Cast Functions and Operators</a></li>
</ol>
]]></content>
      <tags>
        <tag>issue</tag>
      </tags>
  </entry>
  <entry>
    <title>《抗衰老计划》读后感</title>
    <url>/2022/03/06/%E3%80%8A%E6%8A%97%E8%A1%B0%E8%80%81%E8%AE%A1%E5%88%92%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h1 id="金句"><a href="#金句" class="headerlink" title="金句"></a>金句</h1><ul>
<li>我们所谓的衰老在大多数情况下就是疾病的一种表现，普遍存在的慢性疾病不断地侵蚀我们的身体，使我们普遍地接受这种衰退是”变老“的结果</li>
<li>抗衰老有两种途径：逆转疾病进程 和 武装自己消除早期的疾病隐患</li>
<li>抗衰老三种武器：饮食，补充营养物和锻炼身体</li>
<li>抵抗衰老要从抵抗传统的错误教导开始</li>
<li>胆固醇是蜡状的，不溶于水；血液成分主要是水，身体用蛋白质吧胆固醇覆盖后在血液中输送，这些蛋白质载体被称为载脂蛋白</li>
<li>绿茶中的生物类黄酮消灭自由基的能力是维生素E的25倍，是维生素C的100倍</li>
<li>生物类黄酮：茶，洋葱，大蒜</li>
<li>游泳，散步，瑜伽，和其他更缓慢，温和的方式作为锻炼。过度锻炼或剧烈锻炼会产生大量自由基。推荐健美操和力量操</li>
<li>糖类是健康的克星，需要坚决抵制</li>
<li>多吃鸡蛋，番茄</li>
<li>线粒体的DNA和细胞核中DNA是独立的，线粒体的DNA是环状的，无保护层，易受自由基的攻击</li>
</ul>
<h1 id="收获-amp-评价"><a href="#收获-amp-评价" class="headerlink" title="收获&amp;评价"></a>收获&amp;评价</h1><p>这本书和《拯救记忆》类似，都属于营养学类书籍。《拯救记忆》的关注点是大脑，记忆。这本书囊括《拯救》讨论范围，依靠人体血液的指标，讨论了包括主要的心脏病，糖尿病，高血压，阿尔茨海默症。</p>
<h3 id="心脏疾病关键因素："><a href="#心脏疾病关键因素：" class="headerlink" title="心脏疾病关键因素："></a>心脏疾病关键因素：</h3><ul>
<li>高水平的低密度载脂蛋白和高甘油三脂肪组合<ul>
<li>原理：两种物质都特别黏稠；容易引发动脉粥样硬状化</li>
<li>原因：摄入过多糖类（作者限制糖类进食观察血脂中两者组合比例下降，反推出来的）</li>
</ul>
</li>
<li>高水平的同形半胱氨酸<ul>
<li>原理： 导致染色体损害程度增加，尚不清楚如何损害动脉</li>
<li>原因： 缺乏叶酸和维B会导致无法合成足量的清除同形半胱氨酸的酶</li>
</ul>
</li>
</ul>
<h3 id="衰老理论："><a href="#衰老理论：" class="headerlink" title="衰老理论："></a>衰老理论：</h3><ul>
<li><p>糖</p>
<ul>
<li>糖基化改变蛋白质结构，破坏胶原蛋白的弹力；破坏抗氧化物生产酶；直接和DNA结合损害细胞，导致其无法复制或复制紊乱发生癌变</li>
<li>引发胰岛素抵抗和葡糖糖耐受异常，从而导致高血压；高水平胰岛素抑制脱氢表雄酮合成</li>
</ul>
</li>
<li><p>自由基理论</p>
<ul>
<li>预防：食用富含抗氧化物的食物和补充剂</li>
</ul>
</li>
</ul>
<h3 id="拯救"><a href="#拯救" class="headerlink" title="拯救"></a>拯救</h3><ul>
<li>抗氧化剂<ul>
<li>维e，c，硫辛酸，硒</li>
</ul>
</li>
<li>抗氧化酶<ul>
<li>辅酶Q10（心脏细胞中参与线粒体能量的生产和运输，同时消灭能量产生过程出现的自由基，保护线粒体）</li>
</ul>
</li>
</ul>
<h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ul>
<li>不知道是翻译问题，还是原作者问题。书中将载脂蛋白A定义为 一种非常黏的低密度载脂蛋白胆固醇。医学百科中定义载脂蛋白A(HDL)是高密度载脂蛋白胆固醇，属于好的胆固醇；载脂蛋白B(LDL)是低密度载脂蛋白胆固醇，属于坏的胆固醇。</li>
<li>文中引用到其他人的说法和观点，没有参考文献和来源，确认费劲</li>
<li>这本书和《拯救记忆》中类似，推荐褪黑素</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>交换两变量的值</title>
    <url>/2020/12/29/%E4%BA%A4%E6%8D%A2%E4%B8%A4%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC/</url>
    <content><![CDATA[<h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul>
<li><p>采用第三个变量作为中间存储值来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void testSwap01(int a,int b)&#123;</span><br><span class="line">    int c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    System.out.println(&quot;a=&quot;+a);</span><br><span class="line">    System.out.println(&quot;b=&quot;+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul>
<li><p>采用异或的逻辑运算，a^a=0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void testSwap02(int a, int b)&#123;</span><br><span class="line">    a=a^b;</span><br><span class="line">    b=a^b;</span><br><span class="line">    a=a^b;</span><br><span class="line">    System.out.println(&quot;a=&quot;+a);</span><br><span class="line">    System.out.println(&quot;b=&quot;+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>《高效休息》 读后感</title>
    <url>/2019/08/24/%E3%80%8A%E9%AB%98%E6%95%88%E4%BC%91%E6%81%AF%E3%80%8B%20%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>​    我选择《高效休息》这本书的主要缘由是某个周五忘交电费结果4点多就热醒了，又恰逢前一天网上听闻了陆奇这个人的生活作息，于是就想亲身体验一把。可是我也有自知之明的，知道他能有这样的作息，肯定有充足的休息，于是就有阅读些“如何休息”类的书籍想法。</p>
<h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>​    简单，易懂（总分总结构，加以小说类型叙述，带入性好），实操性强，很快就能看到良性反馈。</p>
<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>书的结构分为 前言，先睹为快，正念时刻，结语，特别附录</p>
<ul>
<li><p>前言</p>
<p>在前言中，该书指出DMN（预设模式网络，被认为是“大脑能量吞噬者”） 是造成人感觉累的主要原因，<br>而人感觉累主要是由于大脑疲劳。书中采用的解决方就是“正念”，也就是冥想，强调当下的感觉、体验，<br>用以解除大脑疲劳，获得休息。</p>
</li>
<li><p>先睹为快</p>
<p>介绍了7个休息法，分别是 正念呼吸法，动态冥想，压力呼吸法，”猴子思维“消除法，RAIN法，温柔的慈<br>悲心，扫描全身法。 贯穿这七个方法的核心就是呼吸， 呼吸是意识的锚，注意呼吸就是为了将注意力集<br>中在当下，这就是正念呼吸法，整本书的精髓之所在了。</p>
</li>
<li><p>正念时刻</p>
<p>该部分采用小说似的情节，讲述作者留学耶鲁大学精神医学系时，因为学习的压力产生的疲劳感而求助“尤<br>达”大师，尤达大师用正念思想帮助作者解决了当前的疲劳的情况，随便用正念思想帮助作者伯父的“当下<br>百吉果“ 摆脱困境。</p>
</li>
<li><p>结语</p>
<p>从doing 到being,价值观从”任务导向型”生活 转为 “向成为什么” ，这一点也与《高效能人士的七个<br>习惯中的 以终为始 和要事第一 有着相同的含义</p>
</li>
<li><p>特别语录</p>
<p>美国精神科医生推荐的五日简单休息法，于较长假期中实现较为好</p>
</li>
</ul>
<h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>​    书中讲的正念思想来源于东方的佛教思想中，而佛教有助于心境平静，休息这一点我其实在高中时期就已经感受到了。在高二的一段黑暗时期，我曾执着于“人是如何入睡的”而导致精神崩溃，现在回想起来，也感觉有点发笑，当时自己也是在注意呼吸的，快入睡时而被“原来是这样入睡的”杂念给干扰，然后就是各种回忆，这也许就是我比别人能记得小时候更多的事 缘由吧。</p>
<p>​    现在回想起来，当时就差一个步骤了，书中处理“猴子思维” 这个杂念是缓慢拉回到呼吸，而我当时的做法是猛然拉回到呼吸上，这一点就导致了我精神几乎崩溃。幸而当初有爱看书的习惯，在“三味书屋” 里淘到一本 佛教小故事的集的《禅思》，这本小册子都快翻烂了，现今依旧被珍藏在我家里的书桌上。再之后，我也有点开窍了，接触到了冥想，每天晚饭时期都会找个空荡无人的地方冥思会。到了高三因为学业繁忙，渐渐忘却了这种思想，如今又再次相遇，如果把思想比作人的话，恐怕此刻得泪眼朦胧了吧。当初不作一声告别，从此人海茫茫，杳无音信，穿越世间沉浮十几载，物事人非，耗尽半生追寻，突然在拐角的角落再次相遇，才发现，原来是你就是我要穷尽一生要找的那个人。</p>
<p>​    有点跑题了，正念=冥想=当下=呼吸</p>
]]></content>
      <tags>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>可变参数的一次空指针异常复盘</title>
    <url>/2022/04/12/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E6%AC%A1%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在一次业务实现中，对落盘日志中增加个监测字段，由于一个计划中的监测链接可能是多个，故在一个方法中使用了可变参数接收监测链接，然后做处理。在处理的过程中导致null 异常，导致日志落盘失败，这在日志系统中较为致命，故此复盘总结。</p>
<h1 id="现场模拟"><a href="#现场模拟" class="headerlink" title="现场模拟"></a>现场模拟</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class VariableParamTest &#123;</span><br><span class="line">    private static String a = null;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final VariableParamTest paramTest = new VariableParamTest();</span><br><span class="line"></span><br><span class="line">        paramTest.test(null);</span><br><span class="line">        paramTest.test(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void test(String... str) &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        if (str == null) &#123;</span><br><span class="line">            System.out.println(&quot;检测到null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="现场结果"><a href="#现场结果" class="headerlink" title="现场结果"></a>现场结果</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">null</span><br><span class="line">检测到null</span><br><span class="line">[Ljava.lang.String;@2be94b0f</span><br></pre></td></tr></table></figure>

<h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><ul>
<li>可变参数实际上是语法糖，java在运行时将该参数编译成一个数组形式，所以能看到结果的第三行输出的方法签名是一个字符串数组</li>
<li>编译器在进行构建数组的过程中，会进行类型匹配，如果是非String类型的将会报错，这个在编辑器的时候就能被发现</li>
<li>参数的其实是一个引用地址值，null直接传递编译器不会进行转化。但如果是a=null，传入a，那么编译器收到的正常的地址值，就进行正常转化成[null] 形式</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>对于一个数组结构的入参判定不能仅仅停留在CollectionUtils.isEmpty层面，需要针对其中每个元素进行null判定，考虑到[3,null,null]这种类似情况</li>
<li>在做单元测试时需要反复测试边界条件，确保所有的边界条件都测试到</li>
<li>反复阅读代码，思考各种可能的情况，并把可能的情况都图形可视化</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.runoob.com/w3cnote/java-varargs-parameter.html">Java 可变参数 | 菜鸟教程 (runoob.com)</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>最长顶峰</title>
    <url>/2023/07/29/%E6%9C%80%E9%95%BF%E9%A1%B6%E5%B3%B0/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>输入一个整数数组， 返回最长顶峰长度。 顶峰定义： 最短长度为3， 顶点左边严格递增， 右边严格递减。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>以顶点划分递增区间和递减区间</li>
<li>总区间结束标志： 1.遇到递增时, 存在上一个递增,递减区间，更新历史最长，递增/间区间长度归0 2. 遇到相等元素 3. 结尾递减区间结束</li>
<li>边界条件: 数组长度低于3</li>
</ol>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(array.length &lt;3)&#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int maxLength =0;</span><br><span class="line">    int iLength =0;</span><br><span class="line">    int dLength =0;</span><br><span class="line">    for(int i=1 ; i&lt; array.length; i++)&#123;</span><br><span class="line">      if(array[i] &gt; array[i-1])&#123;</span><br><span class="line">        if(iLength &gt;0 &amp;&amp; dLength &gt;0)&#123;</span><br><span class="line">          maxLength = Math.max(maxLength, iLength + dLength);</span><br><span class="line">          iLength =0;</span><br><span class="line">          dLength = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if(iLength ==0)&#123;</span><br><span class="line">          iLength =2;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          iLength ++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;else if(array[i] &lt; array[i-1] &amp;&amp; iLength &gt;0)&#123;</span><br><span class="line">        dLength++;</span><br><span class="line">      &#125;else if(array[i] == array[i-1])&#123;</span><br><span class="line">        if(iLength &gt;0 &amp;&amp; dLength &gt;0)&#123;</span><br><span class="line">          maxLength = Math.max(maxLength, iLength + dLength);</span><br><span class="line">        &#125;</span><br><span class="line">        iLength =0;</span><br><span class="line">        dLength =0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(iLength &gt;0 &amp;&amp; dLength &gt;0)&#123;</span><br><span class="line">        maxLength = Math.max(maxLength, iLength + dLength);</span><br><span class="line">     &#125;</span><br><span class="line">    return maxLength;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>深入了解Optional</title>
    <url>/2023/08/03/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Optional/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>《拯救记忆》读后感</title>
    <url>/2022/02/27/%E3%80%8A%E6%8B%AF%E6%95%91%E8%AE%B0%E5%BF%86%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>![image-20220227155947736](/Users/zwyeli/Library/Application Support/typora-user-images/image-20220227155947736.png)</p>
<ul>
<li><p>背景</p>
<p>Author: 丹尼尔·亚曼  译: 黎非凡<br>Background: 美国精神病学协会杰出成员<br>product date: 202104</p>
</li>
<li><p>为何会选择这本书</p>
<ul>
<li>最近刚刚把《心理学导论》，对人自身相关事物产生浓厚兴趣，联系到我自己在工作上经常容易忘记一些事情，这个让我有点苦恼。刚好在首都图书馆发现了这本书，便借来阅读一番</li>
</ul>
</li>
<li><p>主要内容</p>
<ul>
<li>作者基于自己临床案例和研究，总结出一套关于记忆问题的判定标准和相应的治疗方案</li>
<li>将自己的拯救记忆计划和传统针对阿尔茨海默症治疗方法对比，斥责传统治疗方法的无效及带来的副作用。</li>
<li>作者将记忆模糊等问题定义为疾病，采用大脑SPECT扫描和MRI扫描来分别检测大脑的功能和结构问题。采用10个维度(血流量，退休/衰老，炎症，遗传，头部创伤，毒素，精神健康，免疫性疾病，神经激素，糖胖病，睡眠问题)来评估记忆情况。用案例故事一一举例相关维度出现的病症及相应的治疗措施。治疗措施主要分为：运动，食疗，保健品。</li>
</ul>
</li>
<li><p>评价</p>
<ul>
<li>文中作者将记忆模糊定义为疾病这个举动让我想到了<a href="https://book.jd.com/writer/%E9%9F%A6%E6%81%A9%C2%B7%E9%9F%A6%E7%99%BB_1.html">韦恩·韦登</a>《心理学导论》中有一章批判思维关于定义的讨论。“定义”是一个比较重要但又是较为主观的，会牵涉到很多方面。在这篇文章里作者是一名精神病分析专家，自然将记忆问题定义为疾病是有利于自己的，一方面能突然自己研究的重要性，另一方面也能引起社会关注，增加记忆领域的经济和社会价值。</li>
<li>文中作者有一句话让我突然眼前一新的感觉。 人一生要经历 出生，成长，衰老，疾病，死亡，这是自然规律，但是自然规律就是对的么？如果我们将衰老定义为一种病呢？ 这个脑洞很大，让我想到了无限可能</li>
<li>书中每一个维度都有推荐保健品。</li>
<li>这本书中曾多次推荐褪黑素营养品,但是最新科学研究已经实锤了褪黑素的各种副作用；</li>
<li>书中建议 运动优先，学习新知识，学习音乐。我采纳接收，因为我喜欢^_^</li>
</ul>
</li>
<li><p>我得到建议</p>
<ul>
<li>多喝水</li>
<li>多做运动，尤其是球拍类运动</li>
<li>每天花15分钟以上学习新知识，比如学习音乐，跳舞或者一门新的语言</li>
<li>尝试每天禁食12～16小时</li>
<li>爱护牙龈</li>
<li>多摄入W-3脂肪酸和益生菌</li>
<li>多食用有机蓝莓</li>
<li>多摄入十字花科蔬菜</li>
<li>多做负重练习</li>
<li>入睡前一小时关掉所有电子产品</li>
<li>打破常规，找一些新鲜的，有挑战性的而且自己也热爱的事情去做</li>
<li>报名去听一节课或参与一次会议，主题是自己不熟悉而又感兴趣的内容</li>
<li>尽快解决任何学习方面的问题</li>
<li>晚上不可太晚吃东西</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>深入理解网络编程</title>
    <url>/2023/07/31/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>漩涡矩阵</title>
    <url>/2023/07/29/%E6%BC%A9%E6%B6%A1%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定一个n*m漩涡矩阵，矩阵按照顺序排列排定, 输出一个有序的一维数组</p>
<p>例如：<br>array = [<br>    [1,  2,   3,  4],<br>    [12, 13,  14, 5],<br>    [11, 16,  15, 6],<br>    [10, 9,   8,  7]<br>]<br>output = [1,2,3,4,5,6,7,8,9,10,12,13,14]</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>整体循环路径为<br>startRow, startColumn ———–》startRow, endColumn<br>^                                     |<br>|                                     |<br>|                                     v<br>endRow, startColumn &lt;———-  endRow, endColumn</li>
<li>定义横坐标起点与终点,纵坐标的起点与终点</li>
<li>每次遍历完一圈，更新上面4个坐标位置</li>
<li>边界条件： 最后 向左或向上可能存在重复扫描</li>
</ol>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static List&lt;Integer&gt; spiralTraverse(int[][] array) &#123;</span><br><span class="line">    // Write your code here.</span><br><span class="line">    int startRow = 0;</span><br><span class="line">    int startColumn=0;</span><br><span class="line">    int endRow = array.length -1;</span><br><span class="line">    int endColumn = array[0].length -1;</span><br><span class="line">    ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    while(startRow&lt;=endRow &amp;&amp; startColumn&lt;=endColumn)&#123;</span><br><span class="line">      System.out.println(startRow+&quot; &quot;+ startColumn+&quot; &quot;+ endColumn+&quot; &quot;+endRow);</span><br><span class="line">        </span><br><span class="line">        for(int i = startColumn; i&lt;= endColumn; i++)&#123;</span><br><span class="line">            result.add(array[startRow][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        for(int i = startRow +1; i&lt;= endRow; i++)&#123;</span><br><span class="line">           result.add(array[i][endColumn]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        for(int i = endColumn-1; i&gt;=startColumn; i--)&#123;</span><br><span class="line">          if(startRow == endRow) break;</span><br><span class="line">          result.add(array[endRow][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        for(int i = endRow -1; i&gt; startRow; i--)&#123;</span><br><span class="line">          if(startColumn == endColumn) break;</span><br><span class="line">          result.add(array[i][startColumn]);</span><br><span class="line">        &#125;</span><br><span class="line">      startRow++;</span><br><span class="line">      endColumn --;</span><br><span class="line">      endRow--;</span><br><span class="line">      startColumn++;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algo</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者与消费者模型</title>
    <url>/2023/08/02/%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>空难感想</title>
    <url>/2022/03/27/%E7%A9%BA%E9%9A%BE%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近3.21东方航空空难事件触动了我的神经，以前不怎么关注也不怎么在意，随着步入社会，也坐过多次飞机，自然空难也就成了我关注的一个点。于是我就专门花了一晚上看了一些历史上的空难视频，这些视频主要是视频主根据公开的黑匣子语音和飞行数据的一个再现模拟。在这一晚上的观看和了解我也收获了一些成长</p>
<h1 id="空难原因"><a href="#空难原因" class="headerlink" title="空难原因"></a>空难原因</h1><ul>
<li>机组人员操作不规范，实际经验不足，能力水平不够(南航地勤人员贿赂当是机长，暴雨天气落地发生海豚跳；国际航线机长英文水平不过关，盲猜塔台指令)，过劳操作，外界压力(波兰政府前去俄罗斯参加卡庭纪念日损失80%政府精要)，精神崩溃(炒股亏损)，突然死亡</li>
<li>塔台人员不足，（瑞士空管局导致空中两机相撞）,经验不足，瞎指挥</li>
<li>维修人员：取巧维护，疏忽细节，产生细节破坏(引擎脱离)</li>
<li>制造商：产品不合格(钢管厚度不一致)</li>
<li>航空公司：对机组人员反馈不够重视</li>
<li>乘客：非法携带违禁品（台湾明星携带汽油）</li>
</ul>
<h1 id="化险为夷要素"><a href="#化险为夷要素" class="headerlink" title="化险为夷要素"></a>化险为夷要素</h1><ul>
<li>未起飞</li>
<li>已落地</li>
<li>机长经验丰富，当机果断；塔台全力配合</li>
</ul>
<h1 id="感动"><a href="#感动" class="headerlink" title="感动"></a>感动</h1><p>日本123航班空难事件是一个印象最深也是落泪的一次事件，飞机在死亡边缘线挣扎30多分钟内时间内，乘客们留下的遗书让我不禁潸然泪下。遗书中有人遗憾，好想能继续活；有人对妻子，对孩子说对不起了，不能继续陪他们走下去了，很自责把剩下的事抛给他们了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">飞机的氧气面罩突然就掉下来了</span><br><span class="line">飞机开始下降</span><br><span class="line">知子，哲也，爸爸妈妈就拜托你们了</span><br><span class="line">哲也 要加油</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好可怕</span><br><span class="line">好可怕</span><br><span class="line">好可怕</span><br><span class="line">谁来帮帮我</span><br><span class="line">好难受</span><br><span class="line">我不想死</span><br><span class="line">麻理子、津度、知代子：</span><br><span class="line">你们要齐心协力，好好帮妈妈的忙</span><br><span class="line">爸爸是在太遗憾了，肯定无救了</span><br><span class="line">原因不明，已经5分钟了</span><br><span class="line">我这辈子再也不想坐飞机了</span><br><span class="line">你们求神保佑我吧</span><br><span class="line">机内好像什么东西爆炸了似的</span><br><span class="line">冒出了浓雾，飞机正在下降</span><br><span class="line">没想到昨天的晚餐是与你们的最后一顿饭</span><br><span class="line">孩子的妈，遇到这种事令人遗憾</span><br><span class="line">永别了，孩子的事就拜托你了</span><br><span class="line">现在是6点30分，飞机盘旋急剧下降</span><br><span class="line">到今天为止，我的人生是幸福的，感谢你</span><br></pre></td></tr></table></figure>

<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><ul>
<li>细节至关重要，重视细节可以化险为夷，忽视细节可以酿造出世纪性悲剧。</li>
<li>时间就是生命，而我们生活中的每一项工作/学习/任务都是需要时间的付出，换而言之我们的人生也就是一趟航班，上面满载的是我们的时间，是我们的生命。</li>
<li>作为我们人生这趟航班的机长，发展出一套完善的自我监控指标和自动报警系统，帮助我们做出最佳决策；与他人合作，时刻保持清醒头脑，塔台有可能不可靠，你的引路人也有可能是个洗脑者；不断累积总结内化经验，面对人生重大危机/转折是，要沉着冷静，要尽办法夺回掌握人生航班的控制权，远离危险；如果大环境对你不友好，直接远离它！强调你要有远见，牺牲当下精神的组织，远离它！时刻把你当作耗材的集体，远离它！永远保持清醒头脑！</li>
<li>有生之年去趟日本</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>线上debug流程</title>
    <url>/2022/03/30/%E7%BA%BF%E4%B8%8Adebug%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>我们有时碰到线上的一些问题，例如进程是否卡住了，输入输出不合预期，cpu负载飙升，GC太频繁</p>
<h1 id="bebug-模版"><a href="#bebug-模版" class="headerlink" title="bebug 模版"></a>bebug 模版</h1><ul>
<li>根据现有的日志分析</li>
<li>查看进程中各个线程工作情况<ul>
<li>top -Hp pid</li>
<li>jstack pid</li>
</ul>
</li>
<li>查看网络链接情况<ul>
<li>netstat -antp|grep pid</li>
<li>dstat 查看网络流量情况</li>
</ul>
</li>
<li>查看内存使用情况<ul>
<li>profile</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>让mac新手好用的配置</title>
    <url>/2022/04/21/%E8%AE%A9mac%E6%96%B0%E6%89%8B%E5%A5%BD%E7%94%A8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="让mac新手好用的配置"><a href="#让mac新手好用的配置" class="headerlink" title="让mac新手好用的配置"></a>让mac新手好用的配置</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>之前一直是windows为主用本，最近切到mac air m1 作为生产主力。刚切过来不论是快捷键还是设置有点不太适应，以下配置是我认为新手入门最需要配置的，加快投入生产尽快带来投资回报。</p>
<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><ul>
<li>brew(需要翻墙）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL &lt;https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&gt;)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>shadowsockets （非大陆区商店）</li>
<li>expressvpn （翻墙后下载，付费更安全）</li>
<li>typora （好的markdown 编辑工具）</li>
<li>sublime （优秀的文本编辑工具）</li>
<li>edge （最新版的基于chronium，内存管理优秀，打通之前windows上账号体系）</li>
<li>jetbrain toolbox （jetbrain的全家桶）</li>
<li>iterm2 （优秀的terminal 管理工具）</li>
<li>坚果云 （同步工具）</li>
<li>another redis desktop manager （redis 客户端）</li>
<li>tunelblick （openvpn 客户端）</li>
<li>xmind （脑图）</li>
<li>maven</li>
<li>gradle</li>
<li>zsh</li>
<li>lrzsz</li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li><p>brew</p>
<ul>
<li><p>关闭自动更新</p>
<p>echo “HOMEBREW_NO_AUTO_UPDATE=1” &gt;&gt; ~/.zshrc</p>
</li>
</ul>
</li>
<li><p>zsh</p>
<ul>
<li>开启自动建议</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<ul>
<li>开启高亮</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<ul>
<li>开启插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure></li>
<li><p>镜像源替换</p>
<p>```<br><a href="https://cloud.tencent.com/developer/article/1614039">https://cloud.tencent.com/developer/article/1614039</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>长头发的十二种自然疗法</title>
    <url>/2022/03/08/%E9%95%BF%E5%A4%B4%E5%8F%91%E7%9A%84%E5%8D%81%E4%BA%8C%E7%A7%8D%E8%87%AA%E7%84%B6%E7%96%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="两个重要的事实"><a href="#两个重要的事实" class="headerlink" title="两个重要的事实"></a>两个重要的事实</h1><ul>
<li>头发常受洗澡时不断冲水，水中含有的氟化物容易让人掉发，长粉刺；氟化物抑制甲状腺<ul>
<li>使用能过滤氟化物的淋浴喷头</li>
</ul>
</li>
<li>头发91%是蛋白质组成，硫酸盐会破坏蛋白质结构<ul>
<li>使用不含硫酸盐的洗发水</li>
</ul>
</li>
<li>双氢</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>领域驱动中的结构</title>
    <url>/2019/08/30/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E4%B8%8E%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>在实行DDD 领域驱动开发的过程中，需要面对的问题有： 如何分结构？在项目中怎样的包结构能够适用于领域驱动？应该怎样决定该段代码合适的位置？</p>
<h1 id="战略结构"><a href="#战略结构" class="headerlink" title="战略结构"></a>战略结构</h1>]]></content>
  </entry>
  <entry>
    <title>记录一次线上卡顿发现与解决过程</title>
    <url>/2023/01/30/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8A%E5%8D%A1%E9%A1%BF%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%A7%A3%E5%86%B3%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>记录一次内存泄露定位</title>
    <url>/2020/12/29/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>这次问题的出现是公司另外一个项目组同事遇到的。当时情况是大约晚上9点左右grafana发出某个服务出现假死状态，研发人员立即登上服务器检查，发现服务器cpu满载，于是就尝试jstack 查看服务进程的堆栈情况，发现已经无法连接了，查看不到堆栈信息；无奈只能从业务日志入手，发现零星的error日志，分别是上午9点左右，在error日志附近都是写库的日志，明显能看到写库的时间在变长，20多秒/30多秒零星出现。然后立马想到的是有可能是出现了60秒导致了中断异常导致某个地方出现内存泄露，致使cpu满载，jstack 无法查看，顺着error 日志的堆栈信息发现类似以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Queue queue=new LinkedBlockingQueue();</span><br><span class="line"></span><br><span class="line">public void consume() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            consumeSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(&quot;遇到异常了：&quot;+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void consumeSomething() throws InterruptedException &#123;</span><br><span class="line">        if(queue.isEmpty())&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;i have consume &quot;+queue.peek());</span><br><span class="line">        if(RandomUtils.nextInt(0,10)==5)&#123;</span><br><span class="line">            throw new InterruptedException(&quot;test&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">private void produce()&#123;</span><br><span class="line">    while (true)&#123;</span><br><span class="line">            queue.add(RandomUtils.nextInt());</span><br><span class="line">        try &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    OutMemoryTest outMemoryTest = new OutMemoryTest();</span><br><span class="line">    new Thread(()-&gt;outMemoryTest.produce()).start();</span><br><span class="line">    new Thread(()-&gt;outMemoryTest.consume()).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致意思是一个生产者源源不断的往队列放入消息，另外一个消费者不停的消费该队列。正常情况是没问题的，但当特殊情况18行代码(模拟数据库超时中断异常)成真时，try……catch在while 外面捕获，导致跳出while循环，消费者终止了消费，然而生产者依旧在不断生产数据，出现积压泄露，进而导致一系列假死状态</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>]]></content>
  </entry>
</search>
